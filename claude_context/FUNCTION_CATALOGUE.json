{
  "meta": {
    "title": "TEG Codebase Function Catalogue",
    "total_functions": 148,
    "last_updated": "2024-12-30",
    "description": "Comprehensive catalogue of all functions in the TEG golf tournament analysis codebase"
  },
  
  "core_data_loading": {
    "description": "Primary data loading functions that handle file I/O, GitHub integration, and environment-aware data access",
    "functions": {
      "read_file": {
        "location": "utils.py",
        "line": 144,
        "arguments": "file_path: str",
        "description": "Environment-aware file reading that automatically handles local files vs GitHub API calls for Railway deployment",
        "used_by": ["load_all_data", "get_google_sheet", "check_for_duplicate_data", "execute_data_deletion", "load_scores_data"]
      },
      "write_file": {
        "location": "utils.py", 
        "line": 160,
        "arguments": "file_path: str, data: pd.DataFrame, commit_message: str = 'Update data'",
        "description": "Environment-aware file writing with automatic GitHub commits for Railway deployment",
        "used_by": ["execute_data_update", "execute_data_deletion", "update_all_data"]
      },
      "load_all_data": {
        "location": "utils.py",
        "line": 246,
        "arguments": "exclude_teg_50: bool = True, exclude_incomplete_tegs: bool = False",
        "description": "Primary cached data loading function with filtering options for TEG 50 and incomplete tournaments",
        "used_by": ["Most analysis pages", "get_complete_teg_data", "get_round_data", "score_type_stats", "get_scorecard_data"]
      },
      "get_scorecard_data": {
        "location": "utils.py",
        "line": 1481,
        "arguments": "teg_num=None, round_num=None, player_code=None",
        "description": "Specialized data loading for scorecard generation with flexible filtering by TEG/round/player",
        "used_by": ["scorecard_v2.py", "scorecard_utils.py", "scorecard_v2_mobile.py"]
      },
      "read_from_github": {
        "location": "utils.py",
        "line": 91,
        "arguments": "file_path",
        "description": "Direct GitHub API file reading for Railway production environment",
        "used_by": ["read_file"]
      },
      "write_to_github": {
        "location": "utils.py",
        "line": 114,
        "arguments": "file_path, data, commit_message='Update data'",
        "description": "Direct GitHub API file writing with commit creation for Railway production",
        "used_by": ["write_file"]
      },
      "backup_file": {
        "location": "utils.py",
        "line": 176,
        "arguments": "source_path, backup_path",
        "description": "Creates timestamped backup copies of data files before modifications",
        "used_by": ["create_timestamped_backups"]
      }
    }
  },

  "data_processing": {
    "description": "Functions that process, transform, calculate, and analyze golf tournament data",
    "functions": {
      "process_round_for_all_scores": {
        "location": "utils.py",
        "line": 307,
        "arguments": "long_df: pd.DataFrame, hc_long: pd.DataFrame",
        "description": "Core scoring calculation engine that computes GrossVP, NetVP, Stableford points from raw scores and handicaps",
        "used_by": ["execute_data_update"]
      },
      "aggregate_data": {
        "location": "utils.py", 
        "line": 819,
        "arguments": "data: pd.DataFrame, aggregation_level: str, measures: List[str] = None, additional_group_fields: List[str] = None",
        "description": "Flexible data aggregation function supporting TEG, Round, Player, and 9-hole level analysis",
        "used_by": ["get_complete_teg_data", "get_round_data", "get_9_data", "get_Pl_data"]
      },
      "add_cumulative_scores": {
        "location": "utils.py",
        "line": 375,
        "arguments": "df: pd.DataFrame",
        "description": "Calculates running cumulative scores through rounds for trend analysis",
        "used_by": ["process_round_for_all_scores"]
      },
      "get_teg_winners": {
        "location": "utils.py",
        "line": 749,
        "arguments": "df: pd.DataFrame",
        "description": "Extracts tournament winners (Trophy, Green Jacket, Wooden Spoon) from TEG data",
        "used_by": ["101TEG History.py"]
      },
      "add_ranks": {
        "location": "utils.py",
        "line": 936,
        "arguments": "df, fields_to_rank=None, rank_ascending=None",
        "description": "Adds ranking columns to DataFrames for performance comparison",
        "used_by": ["get_ranked_teg_data", "get_ranked_round_data", "get_ranked_frontback_data"]
      },
      "reshape_round_data": {
        "location": "utils.py",
        "line": 506,
        "arguments": "df: pd.DataFrame, id_vars: List[str]",
        "description": "Converts wide-format Google Sheets data to long format by hole",
        "used_by": ["process_google_sheets_data"]
      }
    }
  },

  "display_formatting": {
    "description": "Functions that format data values and generate display-ready content",
    "functions": {
      "format_vs_par": {
        "location": "utils.py",
        "line": 730,
        "arguments": "value: float",
        "description": "Formats vs-par values with +/- notation (e.g., +2, -1, E for even)",
        "used_by": ["Multiple display functions", "scorecard_utils.py", "bestball.py"]
      },
      "datawrapper_table": {
        "location": "utils.py",
        "line": 1349,
        "arguments": "df, left_align=None, css_classes=None",
        "description": "Generates HTML tables with consistent Datawrapper styling",
        "used_by": ["ave_by_course.py", "sc_count.py", "300TEG Records.py"]
      },
      "create_stat_section": {
        "location": "utils.py",
        "line": 1141,
        "arguments": "title, value=None, df=None, divider=None",
        "description": "Creates formatted HTML stat sections for records displays",
        "used_by": ["300TEG Records.py", "teg_worsts.py"]
      },
      "format_record_value": {
        "location": "helpers/display_helpers.py",
        "line": 24,
        "arguments": "value, measure",
        "description": "Formats performance values with appropriate +/- notation for records",
        "used_by": ["prepare_records_display"]
      },
      "ordinal": {
        "location": "utils.py",
        "line": 1081,
        "arguments": "n",
        "description": "Converts numbers to ordinal strings (1st, 2nd, 3rd, etc.)",
        "used_by": ["safe_ordinal"]
      },
      "safe_ordinal": {
        "location": "utils.py",
        "line": 1088,
        "arguments": "n",
        "description": "Safe ordinal conversion with error handling for None/NaN values",
        "used_by": ["chosen_rd_context", "chosen_teg_context"]
      }
    }
  },

  "scorecard_generation": {
    "description": "Functions that generate HTML scorecards in various formats for different display scenarios",
    "functions": {
      "generate_single_round_html": {
        "location": "scorecard_utils.py",
        "line": 144,
        "arguments": "player_code, teg_num, round_num, title=None, subheader=None",
        "description": "Generates HTML for individual player round scorecards with hole-by-hole details",
        "used_by": ["scorecard_v2.py"]
      },
      "generate_tournament_html": {
        "location": "scorecard_utils.py",
        "line": 297,
        "arguments": "player_code, teg_num, title=None, subheader=None",
        "description": "Creates comprehensive tournament scorecard showing all rounds for one player",
        "used_by": ["scorecard_v2.py"]
      },
      "generate_round_comparison_html": {
        "location": "scorecard_utils.py",
        "line": 450,
        "arguments": "teg_num, round_num, title=None, subheader=None",
        "description": "Generates side-by-side comparison of all players for a specific round",
        "used_by": ["scorecard_v2.py"]
      },
      "generate_single_round_html_mobile": {
        "location": "scorecard_utils.py",
        "line": 650,
        "arguments": "player_code, teg_num, round_num, title=None, subheader=None",
        "description": "Mobile-optimized individual round scorecard with responsive design",
        "used_by": ["scorecard_v2_mobile.py"]
      },
      "generate_tournament_html_mobile": {
        "location": "scorecard_utils.py",
        "line": 790,
        "arguments": "player_code, teg_num, title=None, subheader=None",
        "description": "Mobile-optimized tournament scorecard with condensed layout",
        "used_by": ["scorecard_v2_mobile.py"]
      },
      "generate_round_comparison_html_mobile": {
        "location": "scorecard_utils.py",
        "line": 1028,
        "arguments": "teg_num, round_num, title=None, subheader=None",
        "description": "Mobile-optimized round comparison with horizontal scrolling",
        "used_by": ["scorecard_v2_mobile.py"]
      },
      "load_scorecard_css": {
        "location": "scorecard_utils.py",
        "line": 131,
        "arguments": "",
        "description": "Loads CSS styling for scorecard display consistency",
        "used_by": ["scorecard_v2.py", "scorecard_v2_mobile.py"]
      },
      "generate_scorecard_html": {
        "location": "scorecard_utils.py",
        "line": 13,
        "arguments": "df, layout='single-round', title='Scorecard'",
        "description": "Generic scorecard HTML generator with configurable layouts",
        "used_by": ["Internal scorecard functions"]
      }
    }
  },

  "chart_visualization": {
    "description": "Functions that create interactive charts and visualizations using Plotly",
    "functions": {
      "create_cumulative_graph": {
        "location": "make_charts.py",
        "line": 26,
        "arguments": "df, chosen_teg, y_series, title, y_calculation=None, y_axis_label=None, chart_type='default'",
        "description": "Creates cumulative performance charts across tournament rounds",
        "used_by": ["102TEG Results.py", "leaderboard.py"]
      },
      "create_round_graph": {
        "location": "make_charts.py", 
        "line": 111,
        "arguments": "df, chosen_teg, chosen_round, y_series, title, y_calculation=None, y_axis_label=None, chart_type='default'",
        "description": "Creates round-specific performance charts with annotations",
        "used_by": ["latest_round.py"]
      },
      "format_value": {
        "location": "make_charts.py",
        "line": 13,
        "arguments": "value, chart_type",
        "description": "Formats values for chart display based on chart type",
        "used_by": ["create_cumulative_graph", "create_round_graph"]
      },
      "add_round_annotations": {
        "location": "make_charts.py",
        "line": 6,
        "arguments": "fig, max_round",
        "description": "Adds vertical line annotations to mark rounds on charts",
        "used_by": ["create_cumulative_graph", "create_round_graph"]
      },
      "adjusted_stableford": {
        "location": "make_charts.py",
        "line": 103,
        "arguments": "data",
        "description": "Adjusts Stableford scores for chart display",
        "used_by": ["Chart formatting functions"]
      },
      "adjusted_grossvp": {
        "location": "make_charts.py",
        "line": 106,
        "arguments": "data", 
        "description": "Adjusts GrossVP values for chart display",
        "used_by": ["Chart formatting functions"]
      },
      "create_percentage_distribution_chart": {
        "location": "helpers/score_count_processing.py",
        "line": 75,
        "arguments": "df, teg_desc, par_desc",
        "description": "Creates percentage distribution bar charts for score analysis",
        "used_by": ["sc_count.py"]
      }
    }
  },

  "helper_utilities": {
    "description": "General purpose utility functions that support various operations",
    "functions": {
      "clear_all_caches": {
        "location": "utils.py",
        "line": 25,
        "arguments": "",
        "description": "Clears all Streamlit caches - critical after data updates",
        "used_by": ["1000Data update.py", "delete_data.py", "execute_data_deletion"]
      },
      "get_player_name": {
        "location": "utils.py",
        "line": 294,
        "arguments": "initials: str",
        "description": "Converts player codes to full names (e.g., 'JB' -> 'Jon Baker')",
        "used_by": ["Display functions"]
      },
      "load_course_info": {
        "location": "utils.py",
        "line": 1585,
        "arguments": "",
        "description": "Loads course information including areas for geographical filtering",
        "used_by": ["ave_by_course.py"]
      },
      "get_trophy_full_name": {
        "location": "utils.py",
        "line": 1563,
        "arguments": "trophy: str",
        "description": "Converts trophy abbreviations to full names for display",
        "used_by": ["101TEG History.py"]
      },
      "load_datawrapper_css": {
        "location": "utils.py",
        "line": 1345,
        "arguments": "",
        "description": "Loads standard CSS styling for consistent table appearance",
        "used_by": ["Most display pages"]
      },
      "get_base_directory": {
        "location": "utils.py",
        "line": 30,
        "arguments": "",
        "description": "Gets base directory path for file operations across environments",
        "used_by": ["File I/O functions"]
      },
      "compress_ranges": {
        "location": "utils_win_tables.py",
        "line": 51,
        "arguments": "items, sep=', ', out_sep='-'",
        "description": "Compresses number ranges for display (e.g., '1,2,3,5' -> '1-3, 5')",
        "used_by": ["101TEG History.py"]
      }
    }
  },

  "state_management": {
    "description": "Functions that manage Streamlit session state and user interface workflows",
    "functions": {
      "initialize_update_state": {
        "location": "helpers/data_update_processing.py",
        "line": 38,
        "arguments": "force_reset=False",
        "description": "Initializes session state for data update workflow state machine",
        "used_by": ["1000Data update.py"]
      },
      "initialize_deletion_state": {
        "location": "helpers/data_deletion_processing.py",
        "line": 22,
        "arguments": "force_reset=False", 
        "description": "Initializes session state for data deletion workflow state machine",
        "used_by": ["delete_data.py"]
      },
      "initialize_scorecard_session_state": {
        "location": "helpers/scorecard_data_processing.py",
        "line": 153,
        "arguments": "",
        "description": "Sets up session state for scorecard tab selection and preferences",
        "used_by": ["scorecard_v2.py"]
      },
      "initialize_round_selection_state": {
        "location": "helpers/latest_round_processing.py",
        "line": 32,
        "arguments": "",
        "description": "Initializes session state for round selection interface",
        "used_by": ["latest_round.py"]
      },
      "initialize_teg_selection_state": {
        "location": "helpers/latest_round_processing.py", 
        "line": 186,
        "arguments": "",
        "description": "Initializes session state for TEG selection interface", 
        "used_by": ["latest_teg_context.py"]
      },
      "create_round_selection_reset_function": {
        "location": "helpers/latest_round_processing.py",
        "line": 70,
        "arguments": "df_round",
        "description": "Creates callback function for 'Latest Round' button reset",
        "used_by": ["latest_round.py"]
      }
    }
  },

  "file_management": {
    "description": "Functions for data validation, integrity checking, and file management",
    "functions": {
      "check_for_complete_and_duplicate_data": {
        "location": "utils.py",
        "line": 642,
        "arguments": "all_scores_path: str, all_data_path: str",
        "description": "Validates data integrity across files and detects duplicates",
        "used_by": ["1000Data update.py"]
      },
      "update_all_data": {
        "location": "utils.py",
        "line": 598,
        "arguments": "csv_file: str, parquet_file: str, csv_output_file: str",
        "description": "Updates master data files after new data insertion",
        "used_by": ["execute_data_update"]
      },
      "save_to_parquet": {
        "location": "utils.py",
        "line": 419,
        "arguments": "df: pd.DataFrame, output_file: str",
        "description": "Saves DataFrame to parquet format with error handling",
        "used_by": ["Data processing functions"]
      },
      "create_timestamped_backups": {
        "location": "helpers/data_deletion_processing.py",
        "line": 79,
        "arguments": "",
        "description": "Creates timestamped backup files before data deletion operations",
        "used_by": ["execute_data_deletion"]
      }
    }
  },

  "leaderboard_generation": {
    "description": "Functions for creating tournament leaderboards and standings",
    "functions": {
      "create_leaderboard": {
        "location": "leaderboard_utils.py",
        "line": 14,
        "arguments": "leaderboard_df: pd.DataFrame, value_column: str, ascending: bool = True",
        "description": "Creates formatted leaderboard with rankings and position indicators",
        "used_by": ["display_leaderboard"]
      },
      "display_leaderboard": {
        "location": "leaderboard_utils.py",
        "line": 139,
        "arguments": "leaderboard_df: pd.DataFrame, value_column: str, title: str, leader_label: str, ascending: bool",
        "description": "Complete leaderboard display with title, table, and champion callouts",
        "used_by": ["102TEG Results.py", "leaderboard.py"]
      },
      "get_champions": {
        "location": "leaderboard_utils.py",
        "line": 100,
        "arguments": "df: pd.DataFrame",
        "description": "Extracts and formats champion/leader information from leaderboard",
        "used_by": ["display_leaderboard"]
      },
      "get_last_place": {
        "location": "leaderboard_utils.py",
        "line": 114,
        "arguments": "df: pd.DataFrame",
        "description": "Extracts and formats last place information from leaderboard",
        "used_by": ["display_leaderboard"]
      },
      "format_value": {
        "location": "leaderboard_utils.py",
        "line": 72,
        "arguments": "value: Any, value_type: str",
        "description": "Formats leaderboard values based on score type (GrossVP, Stableford, etc.)",
        "used_by": ["create_leaderboard", "generate_table_html"]
      }
    }
  },

  "analysis_functions": {
    "description": "Statistical analysis and performance calculation functions",
    "functions": {
      "get_best": {
        "location": "utils.py",
        "line": 1020,
        "arguments": "df, measure_to_use, player_level = False, top_n = 1",
        "description": "Finds best performances for specified measure, with player-level or overall analysis",
        "used_by": ["301Best_TEGs_and_Rounds.py", "302Personal Best Rounds & TEGs.py"]
      },
      "get_worst": {
        "location": "utils.py",
        "line": 1053,
        "arguments": "df, measure_to_use, player_level = False, top_n = 1",
        "description": "Finds worst performances for specified measure, with player-level or overall analysis", 
        "used_by": ["teg_worsts.py"]
      },
      "score_type_stats": {
        "location": "utils.py",
        "line": 1263,
        "arguments": "df=None",
        "description": "Calculates career statistics for eagles, birdies, pars, and poor scores",
        "used_by": ["birdies_etc.py"]
      },
      "max_scoretype_per_round": {
        "location": "utils.py",
        "line": 1289,
        "arguments": "df = None",
        "description": "Finds maximum achievement counts in single rounds (most birdies, etc.)",
        "used_by": ["birdies_etc.py"]
      },
      "chosen_rd_context": {
        "location": "utils.py",
        "line": 1096,
        "arguments": "ranked_rd_df, teg = 'TEG 16', rd = 4, measure = None",
        "description": "Provides context for how a specific round compares to other rounds",
        "used_by": ["latest_round.py"]
      },
      "chosen_teg_context": {
        "location": "utils.py",
        "line": 1118,
        "arguments": "ranked_teg_df, teg = 'TEG 15', measure = None",
        "description": "Provides context for how a specific TEG compares to other TEGs",
        "used_by": ["latest_teg_context.py"]
      },
      "calculate_multi_score_running_sum": {
        "location": "helpers/streak_analysis_processing.py",
        "line": 35,
        "arguments": "df",
        "description": "Calculates consecutive achievement streaks (consecutive pars, birdies, etc.)",
        "used_by": ["prepare_streak_data_for_display"]
      }
    }
  },

  "cached_data_functions": {
    "description": "Streamlit cached functions for optimized data loading",
    "functions": {
      "get_complete_teg_data": {
        "location": "utils.py",
        "line": 878,
        "arguments": "",
        "description": "Cached function returning complete TEG-level data excluding incomplete tournaments",
        "used_by": ["teg_worsts.py"]
      },
      "get_round_data": {
        "location": "utils.py",
        "line": 890,
        "arguments": "ex_50 = True, ex_incomplete= False",
        "description": "Cached function returning round-level aggregated data with filtering options",
        "used_by": ["ave_by_course.py", "teg_worsts.py"]
      },
      "get_9_data": {
        "location": "utils.py",
        "line": 896,
        "arguments": "",
        "description": "Cached function returning 9-hole (front/back) aggregated data",
        "used_by": ["teg_worsts.py"]
      },
      "get_ranked_teg_data": {
        "location": "utils.py",
        "line": 1003,
        "arguments": "",
        "description": "Cached function returning TEG data with performance rankings added",
        "used_by": ["301Best_TEGs_and_Rounds.py", "302Personal Best Rounds & TEGs.py", "latest_teg_context.py"]
      },
      "get_ranked_round_data": {
        "location": "utils.py", 
        "line": 1009,
        "arguments": "",
        "description": "Cached function returning round data with performance rankings added",
        "used_by": ["301Best_TEGs_and_Rounds.py", "302Personal Best Rounds & TEGs.py", "latest_round.py"]
      },
      "get_ranked_frontback_data": {
        "location": "utils.py",
        "line": 1015,
        "arguments": "",
        "description": "Cached function returning 9-hole data with performance rankings added",
        "used_by": ["Records and analysis pages"]
      },
      "get_google_sheet": {
        "location": "utils.py",
        "line": 431,
        "arguments": "sheet_name: str, worksheet_name: str",
        "description": "Cached function for loading data from Google Sheets with authentication",
        "used_by": ["1000Data update.py"]
      },
      "calculate_bestball_scores": {
        "location": "helpers/bestball_processing.py",
        "line": 55,
        "arguments": "filtered_data",
        "description": "Cached calculation of bestball team format scores (best score per hole)",
        "used_by": ["bestball.py"]
      },
      "calculate_worstball_scores": {
        "location": "helpers/bestball_processing.py",
        "line": 85,
        "arguments": "filtered_data", 
        "description": "Cached calculation of worstball team format scores (worst score per hole)",
        "used_by": ["bestball.py"]
      }
    }
  },

  "specialized_processing": {
    "description": "Functions for specific analysis types and specialized data processing",
    "functions": {
      "summarise_teg_wins": {
        "location": "utils_win_tables.py",
        "line": 6,
        "arguments": "df, column_name",
        "description": "Creates summary tables of TEG wins by player with win counts and TEG lists",
        "used_by": ["101TEG History.py"]
      },
      "process_google_sheets_data": {
        "location": "helpers/data_update_processing.py",
        "line": 56,
        "arguments": "raw_df",
        "description": "Processes and validates data from Google Sheets for import",
        "used_by": ["1000Data update.py"]
      },
      "execute_data_update": {
        "location": "helpers/data_update_processing.py",
        "line": 119,
        "arguments": "overwrite=False",
        "description": "Executes complete data update workflow with backup and processing",
        "used_by": ["1000Data update.py"]
      },
      "prepare_streak_data_for_display": {
        "location": "helpers/streak_analysis_processing.py",
        "line": 118,
        "arguments": "all_data",
        "description": "Complete workflow for calculating and summarizing performance streaks",
        "used_by": ["streaks.py"]
      },
      "count_scores_by_player": {
        "location": "helpers/score_count_processing.py",
        "line": 38,
        "arguments": "df, field='GrossVP'",
        "description": "Creates score distribution matrices showing frequency of each score by player",
        "used_by": ["sc_count.py"]
      },
      "validate_and_prepare_single_round_data": {
        "location": "helpers/scorecard_data_processing.py",
        "line": 53,
        "arguments": "rd_data",
        "description": "Validates scorecard data for completeness and formats for display",
        "used_by": ["scorecard_v2.py"]
      }
    }
  }
}